// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasakAPI.DataAccess;

#nullable disable

namespace TaskAPI.Db.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20230404045538_authourentitydata")]
    partial class authourentitydata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TaskAPI.Models.Authour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Mudeesha Tharindu"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "John Cena"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Breat Lee"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Sharuk Khan"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthourId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdd")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthourId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthourId = 1,
                            Createdd = new DateTime(2023, 4, 4, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6934),
                            Description = "Get vegitables for the week",
                            Due = new DateTime(2023, 4, 9, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6943),
                            Status = 0,
                            Title = "Get books fro school from db"
                        },
                        new
                        {
                            Id = 2,
                            AuthourId = 1,
                            Createdd = new DateTime(2023, 4, 4, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6949),
                            Description = "Get some text book for school",
                            Due = new DateTime(2023, 4, 9, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6949),
                            Status = 0,
                            Title = "Need some grocceries"
                        },
                        new
                        {
                            Id = 3,
                            AuthourId = 2,
                            Createdd = new DateTime(2023, 4, 4, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6951),
                            Description = "Get vegitables for the week",
                            Due = new DateTime(2023, 4, 9, 10, 25, 38, 304, DateTimeKind.Local).AddTicks(6951),
                            Status = 0,
                            Title = "Get books fro school from db"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Authour", "Authour")
                        .WithMany()
                        .HasForeignKey("AuthourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authour");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasakAPI.DataAccess;

#nullable disable

namespace TaskAPI.Db.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    partial class TodoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TaskAPI.Models.Authour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "827/1",
                            City = "colombo",
                            FullName = "Mudeesha Tharindu",
                            Street = "Street 1"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "750",
                            City = "Galle",
                            FullName = "John Cena",
                            Street = "Street 2"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "103",
                            City = "Matara",
                            FullName = "Breat Lee",
                            Street = "Street 3"
                        },
                        new
                        {
                            Id = 4,
                            AddressNo = "85",
                            City = "kandy",
                            FullName = "Sharuk Khan",
                            Street = "Street 4"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthourId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdd")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthourId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthourId = 1,
                            Createdd = new DateTime(2023, 4, 11, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4393),
                            Description = "Get vegitables for the week",
                            Due = new DateTime(2023, 4, 16, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4403),
                            Status = 0,
                            Title = "Get books fro school from db"
                        },
                        new
                        {
                            Id = 2,
                            AuthourId = 1,
                            Createdd = new DateTime(2023, 4, 11, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4407),
                            Description = "Get some text book for school",
                            Due = new DateTime(2023, 4, 16, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4408),
                            Status = 0,
                            Title = "Need some grocceries"
                        },
                        new
                        {
                            Id = 3,
                            AuthourId = 2,
                            Createdd = new DateTime(2023, 4, 11, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4409),
                            Description = "Get vegitables for the week",
                            Due = new DateTime(2023, 4, 16, 12, 58, 34, 322, DateTimeKind.Local).AddTicks(4409),
                            Status = 0,
                            Title = "Get books fro school from db"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Authour", "Authour")
                        .WithMany("Todos")
                        .HasForeignKey("AuthourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authour");
                });

            modelBuilder.Entity("TaskAPI.Models.Authour", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
